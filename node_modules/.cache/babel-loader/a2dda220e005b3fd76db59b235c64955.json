{"ast":null,"code":"var _jsxFileName = \"/Users/dongbisul/Documents/my-emotion/my-emotion/src/components/DiaryList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { sortOptionList } from \"../util/optionList\";\n/**\n * 정렬 기능을 위한 분할\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ControlMenu = _ref => {\n  let {\n    value,\n    onChange,\n    optionList\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: value,\n    onChange: e => onChange(e.target.value),\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.text\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ControlMenu;\n\nfunction DiaryList(_ref2) {\n  _s();\n\n  let {\n    diaryList\n  } = _ref2;\n  const [sortType, setSortType] = useState('latest');\n  const [filter, setFilter] = useState('all');\n\n  const getProcessedDiaryList = () => {\n    const compare = (a, b) => {\n      if (sortType === 'latest') {\n        return parseInt(b.date) - parseInt(a.date);\n      } else {\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    const sortedList = copyList.sort(compare);\n    return sortedList;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType,\n      onChange: setSortType,\n      optionList: sortOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), getProcessedDiaryList().map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: it.content\n    }, it.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DiaryList, \"uGSGEOSaznpJso0pt9+jWbUF3MU=\");\n\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"names":["React","useState","sortOptionList","ControlMenu","value","onChange","optionList","e","target","map","it","idx","text","DiaryList","diaryList","sortType","setSortType","filter","setFilter","getProcessedDiaryList","compare","a","b","parseInt","date","copyList","JSON","parse","stringify","sortedList","sort","content","id","defaultProps"],"sources":["/Users/dongbisul/Documents/my-emotion/my-emotion/src/components/DiaryList.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { sortOptionList } from \"../util/optionList\";\n/**\n * 정렬 기능을 위한 분할\n */\nconst ControlMenu = ({ value, onChange, optionList }) => {\n  return (\n    <select value={value} onChange={(e) => onChange(e.target.value)}>\n      {optionList.map((it, idx) => (\n        <option key={idx} value={it.value}>\n          {it.text}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nfunction DiaryList({ diaryList }) {\n  const [sortType, setSortType] = useState('latest');\n  const [filter, setFilter] = useState('all');\n  \n  const getProcessedDiaryList = () => {\n    const compare = (a, b) => {\n      if (sortType === 'latest') {\n        return parseInt(b.date) - parseInt(a.date);\n      } else {\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    const sortedList = copyList.sort(compare);\n    return sortedList;\n  };\n\n  return (\n    <div>\n      <ControlMenu\n        value={sortType}\n        onChange={setSortType}\n        optionList={sortOptionList}\n      />\n      {getProcessedDiaryList().map((it) => (\n        <div key={it.id}>{it.content}</div>\n      ))}\n    </div>\n  );\n}\n\nDiaryList.defaultProps = {\n  diaryList: [],\n};\n\nexport default DiaryList;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA;AACA;AACA;;;;AACA,MAAMC,WAAW,GAAG,QAAqC;EAAA,IAApC;IAAEC,KAAF;IAASC,QAAT;IAAmBC;EAAnB,CAAoC;EACvD,oBACE;IAAQ,KAAK,EAAEF,KAAf;IAAsB,QAAQ,EAAGG,CAAD,IAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAA/C;IAAA,UACGE,UAAU,CAACG,GAAX,CAAe,CAACC,EAAD,EAAKC,GAAL,kBACd;MAAkB,KAAK,EAAED,EAAE,CAACN,KAA5B;MAAA,UACGM,EAAE,CAACE;IADN,GAAaD,GAAb;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAVD;;KAAMR,W;;AAYN,SAASU,SAAT,QAAkC;EAAA;;EAAA,IAAf;IAAEC;EAAF,CAAe;EAChC,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,QAAD,CAAxC;EACA,MAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;;EAEA,MAAMkB,qBAAqB,GAAG,MAAM;IAClC,MAAMC,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;MACxB,IAAIP,QAAQ,KAAK,QAAjB,EAA2B;QACzB,OAAOQ,QAAQ,CAACD,CAAC,CAACE,IAAH,CAAR,GAAmBD,QAAQ,CAACF,CAAC,CAACG,IAAH,CAAlC;MACD,CAFD,MAEO;QACL,OAAOD,QAAQ,CAACF,CAAC,CAACG,IAAH,CAAR,GAAmBD,QAAQ,CAACD,CAAC,CAACE,IAAH,CAAlC;MACD;IACF,CAND;;IAOA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAed,SAAf,CAAX,CAAjB;IACA,MAAMe,UAAU,GAAGJ,QAAQ,CAACK,IAAT,CAAcV,OAAd,CAAnB;IACA,OAAOS,UAAP;EACD,CAXD;;EAaA,oBACE;IAAA,wBACE,QAAC,WAAD;MACE,KAAK,EAAEd,QADT;MAEE,QAAQ,EAAEC,WAFZ;MAGE,UAAU,EAAEd;IAHd;MAAA;MAAA;MAAA;IAAA,QADF,EAMGiB,qBAAqB,GAAGV,GAAxB,CAA6BC,EAAD,iBAC3B;MAAA,UAAkBA,EAAE,CAACqB;IAArB,GAAUrB,EAAE,CAACsB,EAAb;MAAA;MAAA;MAAA;IAAA,QADD,CANH;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD;;GA7BQnB,S;;MAAAA,S;AA+BTA,SAAS,CAACoB,YAAV,GAAyB;EACvBnB,SAAS,EAAE;AADY,CAAzB;AAIA,eAAeD,SAAf"},"metadata":{},"sourceType":"module"}